// -*- C++ -*-
//
// generated by wxGlade 0.9.3 on Tue Jul  2 04:25:57 2019
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//  Dialog1.cpp Frame1.cpp
//

#include <wx/wx.h>
#include "MyFrame.hpp"

// begin wxGlade: ::extracode
// end wxGlade

wxDEFINE_EVENT(EVT_RADIOBOX_QUACK, wxCommandEvent);
wxDEFINE_EVENT(EVT_RADIOBOX_FLY, wxCommandEvent);

MyFrame::MyFrame(wxWindow* parent,
		 wxWindowID id,
		 const wxString& title,
		 const wxPoint& pos,
		 const wxSize& size,
		 long style)
    : wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
	// begin wxGlade: MyFrame::MyFrame
	notebook_1 = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxNB_LEFT);
	quackBehaviors.push_back(new Quack());
	quackBehaviors.push_back(new MuteQuack());
	quackBehaviors.push_back(new Squeak());
	flyBehaviors.push_back(new FlyWithWings());
	flyBehaviors.push_back(new FlyNoWay());
	flyBehaviors.push_back(new FlyRocketPowered());
	panel_1 = new wxPanel(notebook_1, wxID_ANY);
	frame_statusbar = CreateStatusBar(1);
	const wxString ComboBox_ducks_choices[] = {
		_("Mallard Duck"),
		_("Red Head Duck"),
		_("Rubber Duck"),
		_("Decoy Duck"),
	};
	ComboBox_ducks = new wxComboBox(panel_1, wxID_ANY, wxT(""), wxDefaultPosition, wxDefaultSize, 4, ComboBox_ducks_choices, wxCB_DROPDOWN|wxCB_READONLY);
	for ( auto itr : ducks) {
		wxString wxs(itr->getName().c_str());
		ComboBox_ducks->Set(ComboBox_ducks->GetCount(), &wxs);
	}
	
	
	AddButton = new wxButton(panel_1, wxID_ADD, wxEmptyString);
	const wxString ListBox_current_ducks_choices[] = {};
	ListBox_current_ducks = new wxListBox(panel_1, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, ListBox_current_ducks_choices, wxLB_NEEDED_SB|wxLB_SINGLE);
	RemoveButton = new wxButton(panel_1, wxID_REMOVE, wxEmptyString);
	ClearButton = new wxButton(panel_1, wxID_CLEAR, wxEmptyString);
	const wxString RadioBox_quackBehavior_choices[] = {
		_("Quack!"),
		_("Mute Quack!"),
		_("Squeak!"),
	};
	RadioBox_quackBehavior = new wxRadioBox(panel_1, 10001, _("QuackBehavior"), wxDefaultPosition, wxDefaultSize, 3, RadioBox_quackBehavior_choices, 3, wxRA_SPECIFY_ROWS);
	quackButton = new wxButton(panel_1, 10003, _("Quack!"));
	const wxString RadioBox_flyBehavior_choices[] = {
		_("Fly with Wings"),
		_("No flying"),
		_("Fly Rocket Powered"),
	};
	RadioBox_flyBehavior = new wxRadioBox(panel_1, 10002, _("Fly Behavior"), wxDefaultPosition, wxDefaultSize, 3, RadioBox_flyBehavior_choices, 3, wxRA_SPECIFY_ROWS);
	flyButton = new wxButton(panel_1, 10004, _("Fly!"));
	textCtrl_output = new wxTextCtrl(panel_1, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_BESTWRAP|wxTE_LEFT|wxTE_MULTILINE|wxTE_READONLY|wxTE_WORDWRAP);
	button_3 = new wxButton(panel_1, 10005, _("Clear Output"));
	panel_2 = new wxPanel(notebook_1, wxID_ANY);

	set_properties();
	do_layout();
	// end wxGlade
}

void MyFrame::set_properties()
{
	// begin wxGlade: MyFrame::set_properties
	SetTitle(_("Design Patterns - Demo"));
	int frame_statusbar_widths[] = { -1 };
	frame_statusbar->SetStatusWidths(1, frame_statusbar_widths);
	
	// statusbar fields
	const wxString frame_statusbar_fields[] = {
		_("frame_statusbar"),
	};
	for(int i = 0; i < frame_statusbar->GetFieldsCount(); ++i) {
		frame_statusbar->SetStatusText(frame_statusbar_fields[i], i);
	}
	ComboBox_ducks->SetSelection(0);
	ListBox_current_ducks->SetMinSize(wxSize(200, 85));
	RadioBox_quackBehavior->SetSelection(0);
	RadioBox_flyBehavior->SetSelection(0);
	textCtrl_output->SetMinSize(wxSize(300, 150));
	// end wxGlade
}

void MyFrame::do_layout()
{
	// begin wxGlade: MyFrame::do_layout
	wxGridSizer* sizer_1 = new wxGridSizer(1, 1, 0, 0);
	wxFlexGridSizer* grid_sizer_1 = new wxFlexGridSizer(4, 1, 0, 0);
	wxBoxSizer* sizer_9 = new wxBoxSizer(wxHORIZONTAL);
	wxWrapSizer* sizer_2 = new wxWrapSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_5 = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_3 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
	wxBoxSizer* sizer_8 = new wxBoxSizer(wxVERTICAL);
	wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
	sizer_6->Add(ComboBox_ducks, 0, wxALL, 5);
	sizer_6->Add(AddButton, 0, wxALL|wxEXPAND, 5);
	grid_sizer_1->Add(sizer_6, 1, wxEXPAND, 0);
	sizer_7->Add(ListBox_current_ducks, 0, wxALL|wxEXPAND, 5);
	sizer_8->Add(RemoveButton, 1, wxALL, 5);
	sizer_8->Add(ClearButton, 1, wxALL, 5);
	sizer_7->Add(sizer_8, 1, wxEXPAND, 0);
	sizer_3->Add(sizer_7, 0, wxALL, 0);
	grid_sizer_1->Add(sizer_3, 1, wxEXPAND, 0);
	sizer_4->Add(RadioBox_quackBehavior, 0, wxALL, 5);
	sizer_4->Add(quackButton, 0, wxLEFT, 6);
	sizer_2->Add(sizer_4, 1, wxEXPAND, 0);
	sizer_5->Add(RadioBox_flyBehavior, 0, wxALL, 5);
	sizer_5->Add(flyButton, 1, wxLEFT, 5);
	sizer_2->Add(sizer_5, 1, wxEXPAND, 0);
	grid_sizer_1->Add(sizer_2, 1, wxEXPAND, 0);
	sizer_9->Add(textCtrl_output, 0, wxALL, 5);
	sizer_9->Add(button_3, 0, wxALIGN_BOTTOM|wxALL, 5);
	grid_sizer_1->Add(sizer_9, 1, wxEXPAND, 0);
	panel_1->SetSizer(grid_sizer_1);
	notebook_1->AddPage(panel_1, _("Strategy"));
	notebook_1->AddPage(panel_2, _("Observer"));
	sizer_1->Add(notebook_1, 1, wxEXPAND, 0);
	SetSizer(sizer_1);
	sizer_1->Fit(this);
	Layout();
	// end wxGlade
}

BEGIN_EVENT_TABLE(MyFrame, wxFrame)
	// begin wxGlade: MyFrame::event_table
	EVT_BUTTON(wxID_ADD, MyFrame::add_duck_to_listbox)
	EVT_LISTBOX(wxID_ANY, MyFrame::update_radioboxes)
	EVT_BUTTON(wxID_REMOVE, MyFrame::remove_duck_from_list_box)
	EVT_BUTTON(wxID_CLEAR, MyFrame::clear_all_ducks_from_list_box)
	EVT_RADIOBOX(10001, MyFrame::change_quack_behavior)
	EVT_BUTTON(10003, MyFrame::do_quack)
	EVT_RADIOBOX(10002, MyFrame::change_fly_behavior)
	EVT_BUTTON(10004, MyFrame::do_fly)
	EVT_BUTTON(10005, MyFrame::clear_textctrl_output)
	// end wxGlade
END_EVENT_TABLE();

void MyFrame::add_duck_to_listbox(wxCommandEvent &event)  // wxGlade: MyFrame.<event_handler>
{
    wxString selected = ComboBox_ducks->GetStringSelection();
    unsigned int listbox_size = ListBox_current_ducks->GetCount();

    if (ListBox_current_ducks->FindString(selected) == wxNOT_FOUND) {
	ducks.push_back(G_DuckCreator::createDuck(selected.ToStdString(), quackBehaviors, flyBehaviors));

	ListBox_current_ducks->Insert(selected, listbox_size);
    }

    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT(
	"Event handler (MyFrame::add_duck_to_listbox) not implemented yet"));
}

void MyFrame::remove_duck_from_list_box(
    wxCommandEvent& event)    // wxGlade: MyFrame.<event_handler>
{
    int select_pos = ListBox_current_ducks->GetSelection();
    std::string selected_str
	= ListBox_current_ducks->GetStringSelection().ToStdString();
    auto itr = std::find_if(
	std::begin(ducks), std::end(ducks),
	[&](const G_Duck* d) { return !selected_str.compare(d->getName()); });

    if (select_pos != wxNOT_FOUND) {
	ListBox_current_ducks->Delete(select_pos);

	if (itr != ducks.end()) {
	    delete *itr;
	    ducks.erase(itr);
	}
    }

    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::remove_duck_from_list_box) not "
		   "implemented yet"));
}

void MyFrame::clear_all_ducks_from_list_box(
    wxCommandEvent & event)    // wxGlade: MyFrame.<event_handler>
{
    for (auto& i : ducks) {
	std::cout << "Deleting... " << i->getName() << std::endl;
	delete i;
    }

    ducks.clear();
    ListBox_current_ducks->Clear();

    event.Skip();
    // notify the user that he hasn't implemented the event handler yet
    wxLogDebug(wxT("Event handler (MyFrame::clear_all_ducks_from_list_box) not "
		   "implemented yet"));
}
// wxGlade: add MyFrame event handlers

void MyFrame::change_quack_behavior(wxCommandEvent& event) {
	int duck_list_selected = ListBox_current_ducks->GetSelection();
	int quack_rb_selected = RadioBox_quackBehavior->GetSelection();

	if (duck_list_selected != wxNOT_FOUND ) {
	    ducks.at(duck_list_selected)
		->setQuackBehavior(quackBehaviors.at(quack_rb_selected));
	}

	event.Skip();
}

void MyFrame::change_fly_behavior(wxCommandEvent& event)
{
    int duck_list_selected = ListBox_current_ducks->GetSelection();
    int fly_rb_selected = RadioBox_flyBehavior->GetSelection();

    if (duck_list_selected != wxNOT_FOUND) {
	ducks.at(duck_list_selected)
	    ->setFlyBehavior(flyBehaviors.at(fly_rb_selected));
	}

	event.Skip();
}

void MyFrame::do_quack(wxCommandEvent& event)
{
    wxStreamToTextRedirector redirect(textCtrl_output);
    int duck_list_selected = ListBox_current_ducks->GetSelection();

    if (duck_list_selected != wxNOT_FOUND) {
	std::cout << ducks.at(duck_list_selected)->getName() << ": ";
	ducks.at(duck_list_selected)->performQuack();
    }
    
    event.Skip();
}

void MyFrame::do_fly(wxCommandEvent& event)
{

    wxStreamToTextRedirector redirect(textCtrl_output);
    int duck_list_selected = ListBox_current_ducks->GetSelection();

    if (duck_list_selected != wxNOT_FOUND) {
	std::cout << ducks.at(duck_list_selected)->getName() << ": ";
	ducks.at(duck_list_selected)->performFly();
    }
    
    event.Skip();
}

void MyFrame::update_radioboxes(wxCommandEvent& event)
{
    int duck_list_selected = ListBox_current_ducks->GetSelection();

    if (dynamic_cast<Quack*>(
	    ducks.at(duck_list_selected)->getQuackBehaviorInstance())
	!= nullptr)
	RadioBox_quackBehavior->Select(0);

    if (dynamic_cast<MuteQuack*>(
	    ducks.at(duck_list_selected)->getQuackBehaviorInstance())
	!= nullptr)
	RadioBox_quackBehavior->Select(1);

    if (dynamic_cast<Squeak*>(
	    ducks.at(duck_list_selected)->getQuackBehaviorInstance())
	!= nullptr)
	RadioBox_quackBehavior->Select(2);

    if (dynamic_cast<FlyWithWings*>(
	    ducks.at(duck_list_selected)->getFlyBehaviorInstance())
	!= nullptr)
	RadioBox_flyBehavior->Select(0);

    if (dynamic_cast<FlyNoWay*>(
	    ducks.at(duck_list_selected)->getFlyBehaviorInstance())
	!= nullptr)
	RadioBox_flyBehavior->Select(1);

    if (dynamic_cast<FlyRocketPowered*>(
	    ducks.at(duck_list_selected)->getFlyBehaviorInstance())
	!= nullptr)
	RadioBox_flyBehavior->Select(2);

    event.Skip();
}

void MyFrame::clear_textctrl_output( wxCommandEvent& event )
{
    textCtrl_output->Clear();
    event.Skip();
}
